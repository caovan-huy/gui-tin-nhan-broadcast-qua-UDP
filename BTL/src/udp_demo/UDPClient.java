package udp_demo;

import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.util.Scanner;

public class UDPClient {
    public static void main(String[] args) {
        DatagramSocket socket = null;
        Scanner scanner = new Scanner(System.in);

        try {
            socket = new DatagramSocket(); // kh√¥ng c·∫ßn port c·ªë ƒë·ªãnh
            InetAddress serverAddress = InetAddress.getByName("localhost"); // IP c·ªßa server
            int serverPort = 9876;

            while (true) {
                // --- Nh·∫≠p d·ªØ li·ªáu t·ª´ b√†n ph√≠m ---
                System.out.print("Nh·∫≠p tin nh·∫Øn g·ª≠i Server: ");
                String message = scanner.nextLine();

                // --- G·ª≠i d·ªØ li·ªáu ---
                byte[] sendData = message.getBytes();
                DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, serverAddress, serverPort);
                socket.send(sendPacket);

                // N·∫øu nh·∫≠p "exit" th√¨ d·ª´ng Client
                if (message.equalsIgnoreCase("exit")) {
                    System.out.println("‚õî ƒê√≥ng Client...");
                    break;
                }

                // --- Nh·∫≠n ph·∫£n h·ªìi t·ª´ Server ---
                byte[] buffer = new byte[1024];
                DatagramPacket receivePacket = new DatagramPacket(buffer, buffer.length);
                socket.receive(receivePacket);

                String reply = new String(receivePacket.getData(), 0, receivePacket.getLength());
                System.out.println("üí¨ Server tr·∫£ l·ªùi: " + reply);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (socket != null && !socket.isClosed()) {
                socket.close();
            }
            scanner.close();
        }
    }
}
